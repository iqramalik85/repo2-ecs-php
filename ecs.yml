---
- name: Deploy ECS Task and Service with EC2
  hosts: localhost
  gather_facts: False
  become: yes
  vars:
    aws_region: "us-east-1"
    ecs_cluster_name: "ecs-php"
    ecs_task_definition_name: "mytask-defination"
    ecs_service_name: "myecs-service"
    ecs_container_name: "ecs-container"
    ecs_container_image: "736116236436.dkr.ecr.us-east-1.amazonaws.com/my-img2:latest"
    task_definition: null
    venv_path: "/tmp/ansible_venv"

  tasks:
    - name: Ensure Python venv is installed
      package:
        name: python3-venv
        state: present

    - name: Create a virtual environment
      command: python3 -m venv {{ venv_path }}
      args:
        creates: "{{ venv_path }}/bin/activate"

    - name: Ensure pip is installed in the virtual environment
      command: "{{ venv_path }}/bin/python -m ensurepip"
      args:
        creates: "{{ venv_path }}/bin/pip"

    - name: Ensure boto3 is installed in the virtual environment
      command: "{{ venv_path }}/bin/pip install boto3"

    - name: Ensure botocore is installed in the virtual environment
      command: "{{ venv_path }}/bin/pip install botocore"

    - name: Create ECS Cluster
      command: "{{ venv_path }}/bin/aws ecs create-cluster --cluster-name {{ ecs_cluster_name }}"
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        AWS_DEFAULT_REGION: "{{ aws_region }}"
      ignore_errors: yes  # Ignore errors if the cluster already exists

    - name: Create ECS Task Definition
      ecs_taskdefinition:
        region: "{{ aws_region }}"
        family: "{{ ecs_task_definition_name }}"
        network_mode: awsvpc
        access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        execution_role_arn: "arn:aws:iam::736116236436:role/ecsTaskExecutionRole"
        containers:
          - name: "{{ ecs_container_name }}"
            image: "{{ ecs_container_image }}"
            portMappings:
              - containerPort: 80  # Assigning port 8081 to the container
                hostPort: 80
            memoryReservation: 100
            memory: 250
            cpu: 100
        state: present
      register: task_definition

    - name: Register ECS Task Definition
      debug:
        var: task_definition

    - name: Create ECS Service
      ecs_service:
        region: "{{ aws_region }}"
        cluster: "{{ ecs_cluster_name }}"
        service: "{{ ecs_service_name }}"
        task_definition: "{{ ecs_task_definition_name }}"
        launch_type: EC2
        desired_count: 1  # Set the desired count to 1 to start one task
        deployment_configuration:
          maximum_percent: 200
          minimum_healthy_percent: 50
        network_configuration:
          subnets:
            - "subnet-095be323bd97dc9a4"
            - "subnet-0c8e1eaaaff0a0726"
            - "subnet-0e3db30d9fdcb6414"
            - "subnet-04b85618616f2da9d"
            - "subnet-0925766f7ff391b44"
          security_groups:
            - "sg-0a85d937517e6a7b1"
        state: present
      register: service_result

    - name: Register ECS Service
      debug:
        var: service_result
